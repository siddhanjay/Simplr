/** A truthy string or falsy values */
export declare type ValidationResponse = string | null | undefined | false;
/**
 * A validator simply takes a value and returns a string or Promise<string>
 * If a truthy string is returned it represents a validation error
 **/
export interface Validator<TValue> {
    (value: TValue): ValidationResponse | Promise<ValidationResponse>;
}
/**
 * Runs the value through a list of validators. As soon as a validation error is detected, the error is returned
 */
export declare function applyValidators<TValue>(value: TValue, validators: Validator<TValue>[]): Promise<string>;
/** Anything that provides this interface can be composed into the validation system */
export interface Validatable<TValue> {
    validating: boolean;
    validate(): Promise<{
        hasError: true;
    } | {
        hasError: false;
        value: TValue;
    }>;
    hasError: boolean;
    error?: string;
    $: TValue;
    enableAutoValidation: () => void;
}
