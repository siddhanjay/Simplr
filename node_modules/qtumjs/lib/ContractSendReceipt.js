"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sleep_1 = require("./sleep");
class ContractSendReceipt {
    constructor(rpc, sendResult) {
        this.rpc = rpc;
        Object.assign(this, sendResult);
    }
    /**
     * Returns a transaction object that had been confirmed at least n times
     */
    async confirm(nblock = 3, timeout = 3000, txUpdated) {
        if (this.tx && this.tx.confirmations > nblock) {
            return this.tx;
        }
        // if this.confirmed >
        while (true) {
            const tx = await this.rpc.getTransaction({ txid: this.txid });
            // update transaction if is newer
            if (this.tx === undefined || tx.confirmations > this.tx.confirmations) {
                this.tx = tx;
                if (txUpdated) {
                    txUpdated(tx);
                }
            }
            if (tx.confirmations >= nblock) {
                return tx;
            }
            await sleep_1.sleep(timeout + Math.random() * 200);
        }
    }
    /**
     * Check whether a transaction had been confirmed by n blocks.
     */
    async check(nblock = 3) {
        const tx = await this.rpc.getTransaction({ txid: this.txid });
        if (this.tx === undefined || tx.confirmations > this.tx.confirmations) {
            this.tx = tx;
        }
        return tx.confirmations >= nblock;
    }
    /**
     * Repeatedly checks a transaction for confirmation.
     */
    async done(nblock = 3, timeout = 3000) {
        while (true) {
            const isConfirmed = await this.check(nblock);
            if (isConfirmed) {
                break;
            }
            await sleep_1.sleep(timeout + Math.random() * 200);
        }
    }
}
exports.ContractSendReceipt = ContractSendReceipt;
