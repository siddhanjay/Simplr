import { Contract, IContractSendRequestOptions } from "./Contract";
import { IABIMethod } from "./ethjs-abi";
import { ConfirmedTransaction } from "./ConfirmedTransaction";
import { IRPCGetTransactionResult, QtumRPC } from "./QtumRPC";
export declare class TransactionPromise {
    private rpc;
    contract: Contract;
    methodABI: IABIMethod;
    params: any[];
    private opts;
    calldata: string;
    private tx?;
    private sendToContractReq?;
    private getTxReq?;
    constructor(rpc: QtumRPC, contract: Contract, methodABI: IABIMethod, params: any[], opts: IContractSendRequestOptions);
    getTx(): Promise<IRPCGetTransactionResult>;
    exec(): Promise<void>;
    then<T>(onfulfilled: (tx: ConfirmedTransaction) => T, reject: (err: any) => void): Promise<void | T>;
    /**
     * Returns a transaction object that had been confirmed at least n times
     */
    confirm(nConfirms?: number, timeout?: number, txUpdated?: (tx: ConfirmedTransaction) => void): Promise<ConfirmedTransaction>;
}
