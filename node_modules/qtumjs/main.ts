import { encodeMethod, IABI } from "ethjs-abi"
import { Contract } from "./src/Contract"
import { QtumRPC } from "./src/QtumRPC"

const rpc = new QtumRPC("http://howard:yeh@localhost:13889")
const qtumPortal = new QtumRPC("http://localhost:9999")

async function testAuthCall() {
  const result = await qtumPortal.rawCall("getnewaddr")
  return result
}

async function testRPCCall() {
  const result = await rpc.getInfo()
  return result
}

async function testSendToContract() {
  const address = "05ce94dc5d7c07cb094aed438bf13e5615b82011"
  const datahex = "ee919d5000000000000000000000000000000000000000000000000000000000000000ff"

  const sendResult = await rpc.sendToContract({
    address,
    datahex,
  })

  return sendResult
}

async function testCallContract() {
  const address = "05ce94dc5d7c07cb094aed438bf13e5615b82011"
  const datahex = "d46300fd"

  const result = await rpc.callContrct({
    address,
    datahex,
  })

  return result
}

async function testGetTransaction(txid: string) {
  // const txid = "5763efd9f9732fa98e86a5b023028377b58671d1564a7b2b564cd0e016c8ef6d"
  // const datahex = "d46300fd"

  return rpc.getTransaction({
    txid,
    // datahex,
  })
}

async function testContract() {
  /* tslint:disable */
  const contractInfo = {
    "name": "AVar",
    "deployName": "aVar",
    "address": "05ce94dc5d7c07cb094aed438bf13e5615b82011",
    "txid": "4ddd9eb2c66b6471cc804e93ea5f2a08cd5f62fe747fa075ffbbd3254e82faa3",
    "abi": [
      {
        "name": "getA",
        "type": "function",
        "payable": false,
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "constant": false
      },
      {
        "name": "setA",
        "type": "function",
        "payable": false,
        "inputs": [
          {
            "name": "_a",
            "type": "uint256"
          }
        ],
        "outputs": [],
        "constant": false
      }
    ],
    "bin": "6060604052341561000f57600080fd5b5b60b98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d46300fd81146046578063ee919d50146068575b600080fd5b3415605057600080fd5b6056607d565b60405190815260200160405180910390f35b3415607257600080fd5b607b6004356084565b005b6000545b90565b60008190555b505600a165627a7a7230582040e87d0c62a01d8dd32ea10840e9f0b3628cb880d9a323b5c07709217591f9d90029",
    "binhash": "42712271c9f5e5dcd27eaeb999bf4388eb80c55cd652980a7b22aa34f774d76b",
    "createdAt": "2017-09-20T11:15:16.25028283+08:00",
    "confirmed": true
  }
  /* tslint:enable */

  const foo = new Contract(rpc, contractInfo)

  const receipt = await foo.send("setA", [1])

  await receipt.check(5)

  console.log("txid", receipt.txid)

  await receipt.done(1)

  // const rawResult = await foo.rawCall("getA")
  const callResult = await foo.call("getA")

  return {
    rawResult,
    callResult,
    r0: callResult[0],
    gasUsed: callResult.gasUsed,
  }
}

async function testABIEncode() {
  // const abi: IABI =  {
  //   name: "setNumber",
  //   type: "function",
  //   payable: false,
  //   inputs: [
  //     {
  //       name: "number",
  //       type: "uint256",
  //     },
  //   ],
  //   outputs: [],
  //   constant: false,
  // }

  /* tslint:disable */
  const setA: IABI = {
    "name": "setA",
    "type": "function",
    "payable": false,
    "inputs": [
      {
        "name": "_a",
        "type": "uint256"
      }
    ],
    "outputs": [],
    "constant": false
  }
  const getA: IABI = {
    "name": "getA",
    "type": "function",
    "payable": false,
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "constant": false
  }
  /* tslint:enable */

  // 0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000000ff
  const getACall = encodeMethod(getA, [])
  return {
    getA: encodeMethod(getA, []),
    setA: encodeMethod(setA, [0xff]),
  }
}



async function main() {
  return testAuthCall()
}

main().then((result) => {
  console.log("ok")
  console.log(result)
}).catch((err) => {
  console.log("err", err)
})
